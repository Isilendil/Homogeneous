combi$Title <- strsplit(combi$Name, split='[,.]')[[1]][2]  # Won't work!
combi$Title <- sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
combi$Title <- sub(' ', '', combi$Title)
# Inspect new feature
table(combi$Title)
# Combine small title groups
combi$Title[combi$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
combi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
combi$Title[combi$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
# Convert to a factor
combi$Title <- factor(combi$Title)
# Engineered variable: Family size
combi$FamilySize <- combi$SibSp + combi$Parch + 1
# Engineered variable: Family
combi$Surname <- sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
combi$FamilyID <- paste(as.character(combi$FamilySize), combi$Surname, sep="")
combi$FamilyID[combi$FamilySize <= 2] <- 'Small'
# Inspect new feature
table(combi$FamilyID)
# Delete erroneous family IDs
famIDs <- data.frame(table(combi$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2, ]
combi$FamilyID[combi$Family %in% famIDs$Var1] <- 'Small'
combi$FamilyID <- factor(combi$FamilyID)
# Split back into test and train sets
train <- combi[1:dim(train)[1], ]
test <- combi[(dim(train)[1]+1):dim(combi)[1], ]
# Build a new tree with our new features
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID,
data=train, method="class")
fancyRpartPlot(fit)
train <- read.csv("~/Kaggle/Titanic:MachineLearningfromDisaster/titanic/train.csv")
test <- read.csv("~/Kaggle/Titanic:MachineLearningfromDisaster/titanic/test.csv")
sample(1:10, replace = TRUE)
summary(combi$Age)
test$Survived <- NA
combi <- rbind(train, test)
summary(combi$Age)
combi$FamilySize <- combi$SibSp + combi$Parch + 1
library(rpart)
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize, data = combi[!is.na(combi$Age),], method = "anova")
combi$Name <- as.character(combi$Name)
combi$Name[1]
strsplit(combi$Name[1], split = '[,.]')
strsplit(combi$Name[1], split = '[,.]')[[1]]
strsplit(combi$Name[1], split = '[,.]')[[1]][2]
combi$Title <- sapply(combi$Name, FUN = function(x) { strsplit(x, split='[,.]')[[1]][2]})
combi$Title <- sub(' ', '', combi$Title)
table(combi$Title)
combi$Title[combi$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
combi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
combi$Title[combi$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
combi$Title <- factor(combi$Title)
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize, data = combi[!is.na(combi$Age),], method = "anova")
combi$Age[is.na(conmbi$Age)] <- predict(Agefit, combi[is.na(combi$Age), ])
combi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age), ])
summary(combi)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(Agefit)
summary(combi)
summary(combi$Embarked)
summary(combi$Embarked)
which(combi$Embarked == '')
combi$Embarked[c(which(combi$Embarked == ''))] = "s"
combi$Embarked[which(combi$Embarked == '')] = "s"
which(combi$Embarked == '')
summary(combi$Embarked)
source('~/.active-rstudio-document', echo=TRUE)
which(combi$Embarked == '')
source('~/.active-rstudio-document', echo=TRUE)
which(combi$Embarked == '')[1]
which(combi$Embarked == '')[2]
c(which(combi$Embarked == ''))
combi$Embarked[which(combi$Embarked == '')] = "S"
summary(combi$Embarked)
summary(combi$Fare)
which(is.na(combi$Fare))
combi$Fare[which(is.na(combi$Fare))] <- median(combi$Fare, na.rm = TRUE)
summary(combi$Fare)
combi$FamilyID2 <- combi$FamilyID
combi$FamilyID2 <- as.character(combi$FamilyID2)
summary(combi$FamilyID2)
combi$FamilyID2 <- combi$FamilyID
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
strsplit(combi$Name[1], split = '[,.]')
source('~/.active-rstudio-document', echo=TRUE)
summary(combi$FamilyID2)
source('~/.active-rstudio-document', echo=TRUE)
varImpPlot(fit)
source('~/.active-rstudio-document', echo=TRUE)
Prediction <- predict(fit, test, OOB = TRUE, type = "response")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "fifthAttempt2.csv", row.names
train <- read.csv("~/Kaggle/Titanic:MachineLearningfromDisaster/titanic/train.csv")
test <- read.csv("~/Kaggle/Titanic:MachineLearningfromDisaster/titanic/test.csv")
summary(train$Cabin)
summary(train$Cabin)
length(is.na(train$Cabin))
table(train$Cabin)
length(!is.na(train$Cabin))
length(train[is.na(train$Cabin),])
length(train[is.missing(train$Cabin),])
length(train[train$Cabin=='',])
length(train[train$Cabin=="",])
length(c(2,3,4))
length(train[train$Cabin==""])
head(train$Cabin)
length(train[train$Cabin==""])
length(train[train$Cabin=="",])
nrow(train[train$Cabin=="",])
nrow(train[train$Cabin!="",])
missmap()
library(Amelia)
install.packages(Amelia)
install.packages("Amelia")
train <- read.csv("~/Kaggle/Titanic:MachineLearningfromDisaster/titanic/data/train.csv")
test <- read.csv("~/Kaggle/Titanic:MachineLearningfromDisaster/titanic/data/test.csv")
test$Survived <- NA
combi <- rbind(train, test)
nrow(train[train$Cabin != "", ])
nr <- nrow(train[train$Cabin != "", ])
nr <- nrow(train[train$Cabin != "", ]); nr
nrowTest <- nrow(test[test$Cabin != "", ]); nrowTest
nrowTest / nrow(test)
nrowTrain / nrow(train)
nrowTrain / nrow(train)
nrowTrain <- nrow(train[train$Cabin != "", ]); nrowTrain
nrowTrain / nrow(train)
nrowTest <- nrow(test[test$Cabin != "", ]); nrowTest
nrowTest / nrow(test)
library(Amelia)
missmap(train$Cabin, main = "Cabin - Missings Map", col = c("yellow", "black"))
a <- c(1,2,3)
a
b <- c(3,2,1)
b
rbind(a,b)
cbind(a,b)
missmap(train, main = "Trainning data - Missings Map", col = c("yellow", "black"))
missmap(test, main = "Testing data - Missings Map", col = c("yellow", "black"))
source('~/.active-rstudio-document', echo=TRUE)
nrow(newTrain)
nrow(newTest)
source('~/.active-rstudio-document', echo=TRUE)
varImpPlot
varImpPlot()
combi$Name <- as.character(combi$Name)
combi$Name[1]
strsplit(combi$Name[1], split = '[,.]')
combi$Name[1]
combi$Name[1][1]
combi$Name[1][1][1]
str(combi$Name[1])
str(combi$Name[1])[1]
str(combi$Name[1])[2]
str(combi$Name[1])[4]
str(combi$Cabin[1])[4]
str(combi$Cabin[2])[4]
str(head(combi$Cabin))
(head(combi$Cabin))
as.character(head(combi$Cabin))
as.character(head(combi$Cabin))[2]
as.character(head(combi$Cabin))[2][3]
strsplit(as.character(head(combi$Cabin))[2], split = '')
strsplit(as.character(head(combi$Cabin))[2], split = '')[1]
strsplit(as.character(head(combi$Cabin))[2], split = '')[1][1]
strsplit(as.character(head(combi$Cabin))[2], split = '')[[1]
]
strsplit(as.character(head(combi$Cabin))[2], split = '')[[1]][1]
as.character(combi$Cabin)
strsplit(cabinTemp, split = '')
cabinTemp <- as.character(combi$Cabin)
strsplit(cabinTemp, split = '')
strsplit(cabinTemp, split = '')[[]][1]
cabinTemp <- as.character(combi$Cabin)
combi$CabinLayer <- sapply(strsplit(cabinTemp, split = ''), FUN = function(x) { x[1]})
table(combi$CabinLayer)
source('~/.active-rstudio-document', echo=TRUE)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID + CabinLayer, data = newTrain, method = "class")
source('~/.active-rstudio-document', echo=TRUE)
View(newTrain)
source('~/.active-rstudio-document', echo=TRUE)
fit <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID2 + CabinLayer, data = newTrain, importance = TRUE, ntree = 2000)
source('~/.active-rstudio-document', echo=TRUE)
library(Amelia)
missmap(newTrain)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
summary(newTrain$CabinLayer)
table(newTrain$CabinLayer)
source('~/.active-rstudio-document', echo=TRUE)
newTrain[newTrain$Cabin == 'T']
newTrain[newTrain$Cabin == 'T',]
combi$CabinLayer <- as.factor(combi$CabinLayer)
source('~/.active-rstudio-document', echo=TRUE)
write.csv(submit, file = "fifthAttempt2.csv", row.names)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(submit)
View(submit)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
result0 <- read.csv("~/Kaggle/Titanic:MachineLearningfromDisaster/titanic/fifthAttempt/fifthAttempt2.csv")
result1 <- submit
View(result0)
View(result1)
c(test$Cabin!='')
result0 <- result0[c(test$Cabin != ''),]
View(result0)
a = c(1,2,3,4,5)
b = c(3,2,4,1,5)
a-b
result0$Survived - result1$Survived
as.integer(1,2,4)
as.integer(c(1,2,4))
as.integer(result0$Survived) - as.integer(result1$Survived)
result0L <- as.integer(result0$Survived)
result1L <- as.integer(result1$Survived)
View(test)
result0L <- as.numeric(result0$Survived)
result1L <- as.numeric(result1$Survived)
resultCombi <- rbind(result0, result1)
View(resultCombi)
resultCombi <- as.numeric(rbind(result0, result1))
resultCombi <- as.integer(rbind(result0, result1))
resultCombi <- as.integer(rbind(result0, result1)$Survived)
length(result0)
nrow(result0)
resultCombi <- rbind(result0, result1)
resultCombi$Survived <- as.ingeter(resultCombi$Survived)
resultCombi$Survived <- as.integer(resultCombi$Survived)
result0 <- resultCombi[1:nrow(result0), ]
result0 <- resultCombi[nrow(result0+1):, ]
result0 <- resultCombi[1:nrow(result0), ]
result0 <- resultCombi[nrow(result0+1):nrow(resultCombi), ]
resultCombi <- rbind(result0, result1)
resultCombi$Survived <- as.integer(resultCombi$Survived)
result0 <- resultCombi[1:nrow(result0), ]
result1 <- resultCombi[nrow(result0+1):nrow(resultCombi), ]
result0$Survived - result1$Survived
result0 <- read.csv("~/Kaggle/Titanic:MachineLearningfromDisaster/titanic/fifthAttempt/fifthAttempt2.csv")
result0 <- result0[c(test$Cabin != ''),]
result1 <- submit
resultCombi <- rbind(result0, result1)
resultCombi$Survived <- as.integer(resultCombi$Survived)
result0 <- resultCombi[1:nrow(result0), ]
result1 <- resultCombi[nrow(result0+1):nrow(resultCombi), ]
result0$Survived - result1$Survived
nrow(result0)
nrow(result1)
nrow(resultCombi)
result0 <- read.csv("~/Kaggle/Titanic:MachineLearningfromDisaster/titanic/fifthAttempt/fifthAttempt2.csv")
result0 <- result0[c(test$Cabin != ''),]
result1 <- submit
resultCombi <- rbind(result0, result1)
resultCombi$Survived <- as.integer(resultCombi$Survived)
result0 <- resultCombi[1:nrow(result0), ]
result1 <- resultCombi[nrow(result0)+1:nrow(resultCombi), ]
result0$Survived - result1$Survived
nrow(result0)
nrow(result1)
nrow(result0)+1
result1 <- resultCombi[nrow(result0)+1:nrow(resultCombi), ]
nrow(result1)
result1 <- resultCombi[91+1:nrow(resultCombi), ]
nrow(result1)
a = c(1,2,3,4,5,6,7)
a[2]
a[2:3]
a[2:6]
a[4:6]
result0 <- resultCombi[1:nrow(result0), ]
nrow(result0)
result1 <- resultCombi[nrow(result0)+1:nrow(resultCombi), ]
nrow(result1)
a = c(1,2,3,4,5)
b = c(1,2,3)
a <- b
a
result0 <- resultCombi[1:nrow(result0), ]
nrow(result0)
nrow(resultCombi)
result1 <- resultCombi[nrow(result0)+1:182, ]
nrow(result1)
result1 <- resultCombi[92:182, ]
nrow(result1)
result0 <- resultCombi[1:nrow(result0), ]
result1 <- resultCombi[(nrow(result0)+1):nrow(resultCombi), ]
nrow(result0)
nrow(result1)
result0$Survived - result1$Survived
result0Original <- read.csv("~/Kaggle/Titanic:MachineLearningfromDisaster/titanic/fifthAttempt/fifthAttempt2.csv")
result0 <- result0Original[c(test$Cabin != ''),]
result1 <- submit
resultCombi <- rbind(result0, result1)
resultCombi$Survived <- as.integer(resultCombi$Survived)
result0 <- resultCombi[1:nrow(result0), ]
result1 <- resultCombi[(nrow(result0)+1):nrow(resultCombi), ]
result0$Survived - result1$Survived
finalResult <- rbind(result0Original[c(test$CaBin == ''), ], submit)
View(finalResult)
finalResult <- rbind(result0Original[c(test$Cabin == ''), ], submit)
View(finalResult)
summary(result0Original$PassengerID)
summary(as.integer(result0Original$PassengerID))
source('~/.active-rstudio-document', echo=TRUE)
combi$CabinLayer <- sapply(strsplit(cabinTemp, split = ''), FUN = function(x) { x[1]})
a = c('1','2','3')
b = strjoin()
paste(a)
paste(a[1],a[2])
paste(a[1],a[2], sep = '')
as.integer(paste(a[1],a[2], sep = ''))
cabinTemp <- as.character(combi$Cabin)
combi$CabinLayer <- sapply(strsplit(cabinTemp, split = ''), FUN = function(x) { x[1]})
combi$CabinLayer <- as.factor(combi$CabinLayer)
cabinTemp
strsplit(cabinTemp[1], split = '')
length(strsplit(cabinTemp[1], split = '')[[1]])
nrow(strsplit(cabinTemp[1], split = '')[[1]])
(strsplit(cabinTemp[1], split = '')[[1]])
(strsplit(cabinTemp[2], split = '')[[1]])
length(strsplit(cabinTemp[2], split = '')[[1]])
CabinNumberTemp <- sapply(strsplit(cabinTemp, split = ''), FUN = function(x) { x[2:length(x)]})
CabinNumberTemp
a=c('1','2','3')
past(a)
paste(a)
paste(a,sep='')
paste(a,collapse='')
combi$CabinLayer <- as.factor(combi$CabinLayer)
CabinNumberTemp <- sapply(strsplit(cabinTemp, split = ''), FUN = function(x) { x[2:length(x)]})
CabinNumberTemp <- sapply(CabinNumberTemp, FUN = function(x) { paste(x, collapse = '')})
as.integer(paste(a,collapse=''))
CabinNumberTemp <- sapply(CabinNumberTemp, FUN = function(x) { paste(x, collapse = '')})
combi$CabinNumber <- sapply(CabinNumberTemp, FUN = function(x) { as.integer(x) })
warnings()
View(combi)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(newTrain)
is.integer("2")
as.integer("2")
as.integer("")
as.integer("d")
a = "c123"
a[-2]
split(a)
strsplit(a)
strsplit(a, split='')
newTrain$Cabin[1]
as.character(newTrain$Cabin[1])
strsplit(as.character(newTrain$Cabin[1]), split = '[a-zA-Z]'
)
strsplit(as.character(newTrain$Cabin[1]), split = ' '
)
cabinTemp <- as.character(combi$Cabin)
cabinTemp
combi$CabinLayer <- sapply(strsplit(cabinTemp, split = ''), FUN = function(x) { x[1]})
strsplit(cabinTemp, split = '')
strsplit("a1 b2 c3", split = '')
strsplit("a1 b2 c3", split = ' ')
strsplit("a1 b2 c3", split = ' ')[[1]][1]
a = c(1,2,3)
which(a)
a = 1
a
a = c(1,2,3)
b = a==1
b
which(b)
length(a)
length(a[1])
dim(a)
len(a)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
train$Ticket
combi$Ticket
train <- read.csv("~/Kaggle/Titanic:MachineLearningfromDisaster/titanic/data/train.csv")
test <- read.csv("~/Kaggle/Titanic:MachineLearningfromDisaster/titanic/data/test.csv")
train$Ticket
sort
sort()
?sort
train[order(train[,9],decreasing=T),]
temp <- train[order(train[,Ticket],decreasing=T),]
temp <- train[order(train[,train$Ticket],decreasing=T),]
temp <- train[order(train[,$Ticket],decreasing=T),]
temp <- train[order(train[,9],decreasing=T),]
View(temp)
temp <- train[order(train[,11],decreasing=T),]
View(train)
View(temp)
temp <- combi[order(train[,11],decreasing=T),]
temp <- combi[order(combi[,11],decreasing=T),]
View(test)
View(temp)
cabinTemp <- sapply(strsplit(cabinTemp, split = ' '), FUN = function(x) { x[1]})
cabinTemp[2]
strsplit(cabinTemp[2], split = '[0-9]')
strsplit(cabinTemp[2], split = '[a-zA-Z]')
cabinTemp <- as.character(combi$Cabin)
combi$CabinLayer <- strsplit(cabinTemp, split = '[0-9]')[[1]][1]
combi$CabinLayer <- as.factor(combi$CabinLayer)
cabinNumberTemp <- as.integer(strsplit(cabinTemp, split = '[a-zA-Z]')[[1]][1])
cabinNumberTemp
strsplit(cabinTemp, split = '[a-zA-Z]')[[1]][1]
strsplit(cabinTemp, split = '[a-zA-Z]')
strsplit(cabinTemp, split = '[a-zA-Z]')
combi$CabinLayer <- as.factor(combi$CabinLayer)
cabinNumberTemp <- sapply((strsplit(cabinTemp, split = '[a-zA-Z]'), FUN = function(x) { as.integer(x[2])}))
cabinNumberTemp <- sapply((strsplit(cabinTemp, split = '[a-zA-Z]'), FUN = function(x) { as.integer(x[2])}))
cabinNumberTemp <- sapply(strsplit(cabinTemp, split = '[a-zA-Z]'), FUN = function(x) { as.integer(x[2])})
view(cabinNumberTemp)
(cabinNumberTemp)
table(cabinNumberTemp)
combi$CabinNumber <- sapply(strsplit(cabinTemp, split = '[a-zA-Z]'), FUN = function(x) { as.integer(x[2])})
a = c(NA , 1 ,1)
a
b = c(1,NA,2)
b
is.na(a) & is.na(b)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
newTrain <- train[(!is.na(train$CabinLayer))&(!is.na(train$CabinNumber)), ]
newTest <- test[(!is.na(test$CabinLayer))&(!is.na(test$CabinNumber)), ]
source('~/.active-rstudio-document', echo=TRUE)
newTrain <- train[c((!is.na(train$CabinLayer))&(!is.na(train$CabinNumber))), ]
newTest <- test[(c(!is.na(test$CabinLayer))&(!is.na(test$CabinNumber))), ]
is.na(train$CabinLayer)
train <- combi[1:dim(train)[1], ]
test <- combi[(dim(train)[1]+1):dim(combi)[1], ]
View(train)
View(test)
combi$CabinLayer <- strsplit(cabinTemp, split = '[0-9]')[[1]][1]
View(combi)
source('~/.active-rstudio-document', echo=TRUE)
finalResult <- rbind(result0Original[c((is.na(test$CabinLayer) | (is.na(test$CabinNumber)))), ], submit)
source('~/.active-rstudio-document', echo=TRUE)
findruns <- function(x, k)
{}
findruns <- function(x, k)
{ }
findruns <- function(x, k)
{ n <- length(x)}
findruns <- function(x, k)
{
n <- length(x)
runs <- NULL
for (i in 1:(n-k))
{
if (all(x[i:i+k-1] == 1))
runs <- c(runs, i)
}
return(runs)
}
findruns(c(1,0,0,1,1,0,1,1,1),2)
debug(findruns)
findruns(c(1,0,0,1,1,0,1,1,1),2)
x
print(n)
k
x[i:i+k-1]
i
k
which.min(x)
ls
file <- read('train_data.txt')
file <- fread('train_data.txt')
setwd('~/Workspace/R/OnlineTransferLearning/Homogeneous')
setwd('~/Workspace/OnlineTransferLearning/Homogeneous/R')
setwd("~/Workspace/Homogeneous/R")
dataset.name <- 'books_dvd.mat'
require(R.matlab)
data.mat <- readMat(paste('../data/', dataset.name, sep = ''))
install.packages('R.matlab')
require(R.matlab)
data.mat <- readMat(paste('../data/', dataset.name, sep = ''))
size <- dim(data.mat$data)
n <- size[1]
d <- size[2]
# set parameters
options <- list()
options$C <- 5
# set parameters: 'sigma' (kernel width) and 't.tick' (step size for plotting figures)
# default: sigma <- 10
options$sigma <- 4
options$sigma2 <- 8
options$t.tick <- round(dim(data.mat$ID.new)[2]/15)
m <- dim(data.mat$ID.new)[2]
options$beta <- sqrt(m) / (sqrt(m) + sqrt(log(2)))
options$number.Old <- n - m
Y <- data.mat$data[, 1]
X <- data.mat$data[, 2:d]
X <- t(apply(X, 1,
function(x) {
(x-min(x)) / (if ( (max(x)-min(x)) == 0 ) 1 else (max(x)-min(x)) ) } ))
MaxX <- matrix(apply(X, 1, max), nrow = dim(X)[1])
memory.limit()
memory.size()
temp <- apply(X[1:100,], 1, function(x) { (x-min(x)) / (if ( (max(x)-min(x)) == 0) 1 else (max(x)-min(x)) ) })
dim(temp)
temp <- t(temp)
dim(data.mat$data)
dim(temp)
361 / 100 * 4000
